# Generated by Django 4.1.7 on 2023-04-01 06:32

from django.db import migrations
import requests
import json
import csv
import re
import os

absolute_path = os.path.dirname(__file__)
relative_path = "src/lib"
full_path = os.path.join(absolute_path, relative_path)


def fetch_buildings(apps, schema_editor):
    LL84Building = apps.get_model('dashboard', 'LL84Building')
    BINLookup = apps.get_model('dashboard', 'BINLookup')

    absolute_path = os.path.dirname(__file__)
    relative_path = "../LL84_2022.csv"
    full_path = os.path.join(absolute_path, relative_path)
    print(full_path)

    with open(full_path, encoding='utf-8') as csvf:
        csvReader = csv.DictReader(csvf)
        for b in csvReader:
            for key in b:
                if b[key] == "Not Available":
                    b[key] = False

            building_obj = LL84Building.objects.create(
                street_address_1=b["Address 1"] if b["Address 1"] else False,
                city=b["City"] if b["City"] else False,
                state="NY",
                postcode=b['Postcode'] if "Postcode" in b else False,
                borough=b['Borough'] if "Borough" in b else False,
                longitude=b['Longitude'] if "Longitude" in b and b['Longitude'] else False,
                latitude=b['Latitude'] if "Latitude" in b and b['Latitude'] else False,
                property_name=b["Property Name"] if "Property Name" in b else False,
                nyc_bbl=b["NYC Borough, Block and Lot (BBL)"] if "NYC Borough, Block and Lot (BBL)" in b else False,
                nyc_bin=b["NYC Building Identification Number (BIN)"] if "NYC Building Identification Number (BIN)" in b else False,
                primary_property_type_calculated=b["Primary Property Type - Portfolio Manager-Calculated"] if "Primary Property Type - Portfolio Manager-Calculated" in b else False,
                primary_property_type_selected=b["Primary Property Type - Self Selected"] if
                "Primary Property Type - Self Selected" in b else False,
                property_use_types=b["List of All Property Use Types at Property"] if
                "List of All Property Use Types at Property" in b else False,
                year_built=b["Year Built"] if "Year Built" in b else False,
                energy_star_score=b["ENERGY STAR Score"] if "ENERGY STAR Score" in b else False,
                energy_star_years=b["ENERGY STAR Certification - Year(s) Certified (Score)"] if
                "ENERGY STAR Certification - Year(s) Certified (Score)" in b else False,
                weather_normalized_energy_use=b["Weather Normalized Site Energy Use (kBtu)"] if
                "Weather Normalized Site Energy Use (kBtu)" in b else False,
                weather_normalized_electricity_use=b["Weather Normalized Site Electricity (kWh)"] if
                "Weather Normalized Site Electricity (kWh)" in b else False,
                weather_normalized_electricity_intensity=b["Weather Normalized Site Electricity Intensity (kWh/ft¬≤)"] if
                "Weather Normalized Site Electricity Intensity (kWh/ft¬≤)" in b else False,
                weather_normalized_natural_gas_use=b["Weather Normalized Site Natural Gas Use (therms)"] if
                "Weather Normalized Site Natural Gas Use (therms)" in b else False,
                weather_normalized_natural_gas_intensity=b["Weather Normalized Site Natural Gas Intensity (therms/ft¬≤)"] if
                "Weather Normalized Site Natural Gas Intensity (therms/ft¬≤)" in b else False,
                total_ghg_emissions=b["Total GHG Emissions (Metric Tons CO2e)"] if "Total GHG Emissions (Metric Tons CO2e)" in b else False,
                total_ghg_emissions_intensity=b["Total GHG Emissions Intensity (kgCO2e/ft¬≤)"] if
                "Total GHG Emissions Intensity (kgCO2e/ft¬≤)" in b else False,
                egrid_output_emissions_rate=b["eGRID Output Emissions Rate (kgCO2e/MBtu)"] if
                "eGRID Output Emissions Rate (kgCO2e/MBtu)" in b else False,
                leed_project_id=b["LEED US Project ID"] if "LEED US Project ID" in b else False,
                gfa=b["Property GFA - Self-Reported (ft¬≤)"] if "Property GFA - Self-Reported (ftÂ²)" in b else False,
                water_use=b["Water Use (All Water Sources) (kgal)"] if "Water Use (All Water Sources) (kgal)" in b else False
            )

            bins = re.split(r'[;|,]\s', b["NYC Building Identification Number (BIN)"]
                            ) if "NYC Building Identification Number (BIN)" in b and b["NYC Building Identification Number (BIN)"] else False
            if bins:
                for bin in bins:
                    BINLookup.objects.create(
                        nyc_bin=bin, building=building_obj)


class Migration(migrations.Migration):
    initial = True
    dependencies = [
        ('dashboard', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(fetch_buildings),
    ]
